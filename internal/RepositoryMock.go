// Code generated by mockery v2.38.0. DO NOT EDIT.

package internal

import (
	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepositoryMock struct {
	mock.Mock
}

type IRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepositoryMock) EXPECT() *IRepository_Expecter {
	return &IRepository_Expecter{mock: &_m.Mock}
}

// GetByDID provides a mock function with given fields: licenceID
func (_m *IRepositoryMock) GetByDID(licenceID string) string {
	ret := _m.Called(licenceID)

	if len(ret) == 0 {
		panic("no return value specified for GetByDID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(licenceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IRepository_GetByDID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDID'
type IRepository_GetByDID_Call struct {
	*mock.Call
}

// GetByDID is a helper method to define mock.On call
//   - licenceID string
func (_e *IRepository_Expecter) GetByDID(licenceID interface{}) *IRepository_GetByDID_Call {
	return &IRepository_GetByDID_Call{Call: _e.mock.On("GetByDID", licenceID)}
}

func (_c *IRepository_GetByDID_Call) Run(run func(licenceID string)) *IRepository_GetByDID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IRepository_GetByDID_Call) Return(_a0 string) *IRepository_GetByDID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepository_GetByDID_Call) RunAndReturn(run func(string) string) *IRepository_GetByDID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerName provides a mock function with given fields: bydID
func (_m *IRepositoryMock) GetCustomerName(bydID string) string {
	ret := _m.Called(bydID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(bydID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IRepository_GetCustomerName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerName'
type IRepository_GetCustomerName_Call struct {
	*mock.Call
}

// GetCustomerName is a helper method to define mock.On call
//   - bydID string
func (_e *IRepository_Expecter) GetCustomerName(bydID interface{}) *IRepository_GetCustomerName_Call {
	return &IRepository_GetCustomerName_Call{Call: _e.mock.On("GetCustomerName", bydID)}
}

func (_c *IRepository_GetCustomerName_Call) Run(run func(bydID string)) *IRepository_GetCustomerName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IRepository_GetCustomerName_Call) Return(_a0 string) *IRepository_GetCustomerName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepository_GetCustomerName_Call) RunAndReturn(run func(string) string) *IRepository_GetCustomerName_Call {
	_c.Call.Return(run)
	return _c
}

// InsertLicenceInfo provides a mock function with given fields: licenceInfo
func (_m *IRepositoryMock) InsertLicenceInfo(licenceInfo LicenceInfo) (LicenceInfo, error) {
	ret := _m.Called(licenceInfo)

	if len(ret) == 0 {
		panic("no return value specified for InsertLicenceInfo")
	}

	var r0 LicenceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(LicenceInfo) (LicenceInfo, error)); ok {
		return rf(licenceInfo)
	}
	if rf, ok := ret.Get(0).(func(LicenceInfo) LicenceInfo); ok {
		r0 = rf(licenceInfo)
	} else {
		r0 = ret.Get(0).(LicenceInfo)
	}

	if rf, ok := ret.Get(1).(func(LicenceInfo) error); ok {
		r1 = rf(licenceInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepository_InsertLicenceInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLicenceInfo'
type IRepository_InsertLicenceInfo_Call struct {
	*mock.Call
}

// InsertLicenceInfo is a helper method to define mock.On call
//   - licenceInfo internal.LicenceInfo
func (_e *IRepository_Expecter) InsertLicenceInfo(licenceInfo interface{}) *IRepository_InsertLicenceInfo_Call {
	return &IRepository_InsertLicenceInfo_Call{Call: _e.mock.On("InsertLicenceInfo", licenceInfo)}
}

func (_c *IRepository_InsertLicenceInfo_Call) Run(run func(licenceInfo LicenceInfo)) *IRepository_InsertLicenceInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(LicenceInfo))
	})
	return _c
}

func (_c *IRepository_InsertLicenceInfo_Call) Return(_a0 LicenceInfo, _a1 error) *IRepository_InsertLicenceInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepository_InsertLicenceInfo_Call) RunAndReturn(run func(LicenceInfo) (LicenceInfo, error)) *IRepository_InsertLicenceInfo_Call {
	_c.Call.Return(run)
	return _c
}

// InsertLicenceProperties provides a mock function with given fields: licenceProperties
func (_m *IRepositoryMock) InsertLicenceProperties(licenceProperties []LicenceProperties) (LicenceProperties, error) {
	ret := _m.Called(licenceProperties)

	if len(ret) == 0 {
		panic("no return value specified for InsertLicenceProperties")
	}

	var r0 LicenceProperties
	var r1 error
	if rf, ok := ret.Get(0).(func([]LicenceProperties) (LicenceProperties, error)); ok {
		return rf(licenceProperties)
	}
	if rf, ok := ret.Get(0).(func([]LicenceProperties) LicenceProperties); ok {
		r0 = rf(licenceProperties)
	} else {
		r0 = ret.Get(0).(LicenceProperties)
	}

	if rf, ok := ret.Get(1).(func([]LicenceProperties) error); ok {
		r1 = rf(licenceProperties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepository_InsertLicenceProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLicenceProperties'
type IRepository_InsertLicenceProperties_Call struct {
	*mock.Call
}

// InsertLicenceProperties is a helper method to define mock.On call
//   - licenceProperties []internal.LicenceProperties
func (_e *IRepository_Expecter) InsertLicenceProperties(licenceProperties interface{}) *IRepository_InsertLicenceProperties_Call {
	return &IRepository_InsertLicenceProperties_Call{Call: _e.mock.On("InsertLicenceProperties", licenceProperties)}
}

func (_c *IRepository_InsertLicenceProperties_Call) Run(run func(licenceProperties []LicenceProperties)) *IRepository_InsertLicenceProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]LicenceProperties))
	})
	return _c
}

func (_c *IRepository_InsertLicenceProperties_Call) Return(_a0 LicenceProperties, _a1 error) *IRepository_InsertLicenceProperties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepository_InsertLicenceProperties_Call) RunAndReturn(run func([]LicenceProperties) (LicenceProperties, error)) *IRepository_InsertLicenceProperties_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepositoryMock {
	mock := &IRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
